This packs in a lot of things at once:

- The `logging.ini` file is being used to control the output of the log file.  Console output is setup in the `logging_config.py` file.  Use case being able to modify console output level at runtime based on the script being run with `--verbose` or `--debug`
- All loggers are using `logging.getLogger(__name__)` format.  This is the recommended approach
- Console output is set to INFO level
- File log is set to DEBUG level
- Module_a has a logger setup in `logging.ini` to have any output from that module be INFO or higher
- Module_b relies on the root logger, which is DEBUG
- Module_a is using a logger from the `__init__.py` file
- Module_b imports the `hello_world` file to get the function
- `disable_existing_loggers` option is a Python 2.6 thing
- `logging.NullHandler()` is a python 2.7 thing

A good module to help with debugging logs is [logging_tree](https://github.com/brandon-rhodes/logging_tree) which will show you all the loggers and how they're configured.
